# -*- coding: utf-8 -*-
"""picklefile.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A0TcXpiRYBESxyy8v1FBj3GomOGPOLnl
"""

import os
import pickle
import streamlit as st
import numpy as np

# Set page configuration
st.set_page_config(page_title="Fraud Detection",
                   layout="wide",
                   page_icon="üõ°Ô∏è")

# Load the model
try:
    fraudpayment_model = pickle.load(open('onlinepaymentfraud_model.sav', 'rb'))
except FileNotFoundError:
    st.error("Model file not found! Please upload 'onlinepaymentfraud_model.sav'.")

# Sidebar for navigation
selected = st.sidebar.radio(
    "Choose an option:",
    ["Fraud Detection", "About the App"]
)

# Fraud Detection Page
if selected == "Fraud Detection":
    # Page title
    st.title('Online Payment Fraud Detection')

    # Input fields
    col1, col2, col3 = st.columns(3)

    with col1:
        amount = st.text_input('Transaction Amount')

    with col2:
        oldbalanceOrg = st.text_input('Sender\'s Balance Before Transaction')

    with col3:
        newbalanceOrg = st.text_input('Sender\'s Balance After Transaction')

    with col1:
        oldbalanceDest = st.text_input('Receiver\'s Balance Before Transaction')

    with col2:
        newbalanceDest = st.text_input('Receiver\'s Balance After Transaction')

    # Prediction button and output
    fraud = ""
    if st.button('Check for Fraud'):
        try:
            # Validate input
            if not amount or not oldbalanceOrg or not newbalanceOrg or not oldbalanceDest or not newbalanceDest:
                raise ValueError("All fields must be filled.")

            # Prepare input
            user_input = [float(amount), float(oldbalanceOrg), float(newbalanceOrg),
                          float(oldbalanceDest), float(newbalanceDest)]
            user_input = np.array(user_input).reshape(1, -1)

            # Make prediction
            prediction = fraudpayment_model.predict(user_input)
            if prediction[0] == 1:
                fraud = 'üö® Fraudulent transaction detected!'
            else:
                fraud = '‚úÖ Transaction is legitimate.'
        except ValueError as ve:
            fraud = f"Input Error: {ve}"
        except Exception as e:
            fraud = f"An error occurred: {e}"

        st.success(fraud)

# About Page
elif selected == "About the App":
    st.title("About the Fraud Detection App")
    st.write("""
    This app helps detect fraudulent online payment transactions using machine learning.
    Simply enter the transaction details and let the model determine if it is legitimate or fraudulent.
    """)