# -*- coding: utf-8 -*-
"""picklefile.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A0TcXpiRYBESxyy8v1FBj3GomOGPOLnl
"""


import os
import pickle
import streamlit as st
from streamlit_option_menu import option_menu

# Set page configuration
st.set_page_config(page_title="Fraud Detection",
                   layout="wide",
                   page_icon="üßë‚Äç‚öïÔ∏è")

import os

# Get the current working directory
working_dir = os.getcwd()
print("Current working directory:", working_dir)

import pickle

# Load the model from the .sav file
fraudpayment_model = pickle.load(open('onlinepaymentfraud_model.sav', 'rb'))

# sidebar for navigation

with st.sidebar:
    selected = option_menu('Online payment fraud detection System',

                           ['Details needed'],
                           menu_icon='hospital-fill',
                           icons=['activity', 'heart', 'person'],
                           default_index=0)

# Diabetes Prediction Page
if selected == 'Details needed':

    # page title
    st.title('Online payment fraud detection using ML')

    # getting the input data from the user
    col1, col2, col3,  = st.columns(3)

    with col1:
        amount = st.text_input('Amount send')

    with col2:
        oldbalanceOrg = st.text_input('Balance before transaction')

    with col3:
        newbalanceOrg = st.text_input('Balance after tarnsaction')

    with col1:
        oldbalanceDest = st.text_input('Receiver\'s balance before transaction ')

    with col2:
        newbalanceDest = st.text_input('Receiver\'s balance after transaction ')
'''
    with col3:
        BMI = st.text_input('BMI value')

    with col1:
        DiabetesPedigreeFunction = st.text_input('Diabetes Pedigree Function value')

    with col2:
        Age = st.text_input('Age of the Person')
'''

# code for Prediction
# creating a button for Prediction
fraud = ""
if st.button('Fraud check'):
    try:
            # Ensure all inputs are filled and are valid numbers
        if not amount or not oldbalanceOrg or not newbalanceOrg or not oldbalanceDest or not newbalanceDest:
            raise ValueError("Please fill in all the fields.")


        user_input = [float(amount), float(oldbalanceOrg), float(newbalanceOrg),
                          float(oldbalanceDest), float(newbalanceDest)]

        user_input = [float(x) for x in user_input]

        Fraud_prediction = fraudpayment_model.predict([user_input])

        if Fraud_prediction[0] == 1:
            fraud = 'Fraudulent transaction detected!'
        else:
            fraud = 'Transaction is legitimate.'
    except ValueError as ve:
            # Handle invalid input errors (non-numeric or missing fields)
            fraud = f"Error: {ve}"        

        

st.success(fraud)